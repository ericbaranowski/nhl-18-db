#!/usr/bin/env python3

import os
import sys
import datetime
import yaml


################################################################################
### Constants
################################################################################

DB_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../db/'))

TEAMS = [
    'ana',
    'ari',
    'bos',
    'buf',
    'car',
    'cbj',
    'cgy',
    'chi',
    'col',
    'dal',
    'det',
    'edm',
    'fla',
    'lak',
    'min',
    'mtl',
    'njd',
    'nsh',
    'nyi',
    'nyr',
    'ott',
    'phi',
    'pit',
    'sjs',
    'stl',
    'tbl',
    'tor',
    'van',
    'vgk',
    'wpg',
    'wsh',

    # Inactive
    'phx',
    'atl',
]

COUNTRIES = [
    'can',
    'cze',
    'deu',
    'fin',
    'gbr',
    'rus',
    'svk',
    'svn',
    'swe',
    'usa',
    'lva',
    'kaz',
    'nor',
    'che',
    'dnk',
    'fra',
]

POTENTIAL_HIGH_FRANCHISE = 1
POTENTIAL_EXACT_AHL = 36

POSITIONS = [
    'c',
    'd',
    'lw',
    'rw',
]

TYPES = [
    '2 way defender',
    '2 way forward',
    'defensive defenseman',
    'grinder',
    'offensive defenseman',
    'playmaker',
    'power forward',
    'sniper',
]


################################################################################
### Validators
################################################################################

def validate_nhlcom_id(p):
    if not isinstance(p['nhlcom_id'], int):
        raise Exception('Bad nhl.com id')

def validate_country(p):
    if not p['country_abbrev'] in COUNTRIES:
        raise Exception('Unknown country')

def validate_player_team(p):
    if not p['team_abbrev'] in TEAMS:
        raise Exception('Unknown team')

def validate_name(p):
    if not isinstance(p['first_name'], str):
        raise Exception('Bad first name')
    if not isinstance(p['last_name'], str):
        raise Exception('Bad last name')

def validate_number(p):
    if not isinstance(p['number'], int):
        raise Exception('Bad number')

def validate_birthday(p):
    if not isinstance(p['born'], datetime.date):
        raise Exception('Bad birthday')

def validate_potential(p):
    if (p['potential'] < POTENTIAL_HIGH_FRANCHISE
    or p['potential'] > POTENTIAL_EXACT_AHL):
        raise Exception('Unknown potential')

def validate_contract(p):
    if not isinstance(p['salary'], float):
        raise Exception('Bad salary')
    if not isinstance(p['years_left'], int):
        raise Exception('Bad years_left')

def validate_height_weight(p):
    if not isinstance(p['height'], int):
        raise Exception('Bad height')
    if not isinstance(p['weight'], int):
        raise Exception('Bad weight')

def validate_position(p):
    if not p['position'] in POSITIONS:
        raise Exception('Unknown position')

def validate_type(p):
    if not p['type'] in TYPES:
        raise Exception('Unknown type')

def validate_shoots(p):
    if p['shoots'] != 'left' and p['shoots'] != 'right':
        raise Exception('Bad shoots')

def validate_draft(p):
    if p['draft_team_abbrev'] is None:
        # Undrafted
        if p['draft_year'] is not None:
            raise Exception('Draft year is not None')
        if p['draft_round'] is not None:
            raise Exception('Draft round is not None')
        if p['draft_overall'] is not None:
            raise Exception('Draft overall is not None')
    else:
        # Drafted
        if not p['draft_team_abbrev'] in TEAMS:
            raise Exception('Unknown draft team')
        if not isinstance(p['draft_year'], int):
            raise Exception('Bad draft year')
        if not isinstance(p['draft_round'], int):
            raise Exception('Bad draft round')
        if not isinstance(p['draft_overall'], int):
            raise Exception('Bad draft overall')

def validate_stars(p):
    fields = [
        'puck_skills',
        'senses',
        'shooting',
        'defense',
        'skating',
        'physical',
    ]
    if not all([1<=p[f]<=10 for f in fields]):
        raise Exception('Bad stars')

def validate_ratings(p):
    fields = [
        'overall',

        'deking',
        'hand_eye',
        'passing',
        'puck_control',

        'discipline',
        'offensive_awareness',
        'poise',

        'slap_shot_accuracy',
        'slap_shot_power',
        'wrist_shot_accuracy',
        'wrist_shot_power',

        'defensive_awareness',
        'faceoffs',
        'shot_blocking',
        'stick_checking',

        'acceleration',
        'agility',
        'balance',
        'endurance',
        'speed',

        'aggressiveness',
        'body_checking',
        'durability',
        'fighting_skill',
        'strength',
    ]
    if not all([10<p[f]<100 for f in fields]):
        raise Exception('Bad rating')

################################################################################
### Player
################################################################################

def validate_player(player_file):
    if not '.yml' in player_file:
        print(f"WARNING: not a .yml file: '{player_file}'")
        return

    print(f"Validating: '{player_file}'")

    f = open(player_file)
    p = yaml.load(f)  # Player dict
    validate_nhlcom_id(p)
    validate_country(p)
    validate_player_team(p)
    validate_name(p)
    validate_number(p)
    validate_birthday(p)
    validate_potential(p)
    validate_contract(p)
    validate_height_weight(p)
    validate_position(p)
    validate_type(p)
    validate_shoots(p)
    validate_draft(p)
    validate_stars(p)
    validate_ratings(p)


################################################################################
### Team
################################################################################

def validate_team(team_abbrev):
    if not team_abbrev in TEAMS:
        print(f"WARNING: unknown team: '{team_abbrev}'")
        return

    team_dir = os.path.join(DB_DIR, team_abbrev)
    for p in os.listdir(team_dir):
        player_file = os.path.join(team_dir, p)
        validate_player(player_file)


################################################################################
### Main
################################################################################

def main():
    team_abbrev = None
    if len(sys.argv) == 2:
        team_abbrev = sys.argv[1]
    for d in os.listdir(DB_DIR):
        if team_abbrev is None:
            validate_team(d)
        elif team_abbrev == d:
            validate_team(team_abbrev)

if __name__ == '__main__':
    main()
